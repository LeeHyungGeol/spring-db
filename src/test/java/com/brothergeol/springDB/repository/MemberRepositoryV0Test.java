package com.brothergeol.springDB.repository;import static org.assertj.core.api.Assertions.assertThat;import static org.assertj.core.api.Assertions.assertThatThrownBy;import static org.junit.jupiter.api.Assertions.*;import com.brothergeol.springDB.domain.Member;import java.sql.SQLException;import java.util.NoSuchElementException;import lombok.extern.slf4j.Slf4j;import org.junit.jupiter.api.Test;@Slf4jclass MemberRepositoryV0Test {    MemberRepositoryV0 repository = new MemberRepositoryV0();    @Test    void save() throws SQLException {        //save        Member member = new Member("memberV1", 10000);        repository.save(member);    }    @Test    void selectTest() throws SQLException {        //save        Member member = new Member("memberV5", 10000);        repository.save(member);        //findById        Member findMember = repository.findById(member.getMemberId());        log.info("findMember={}", findMember);        assertThat(findMember).isEqualTo(member);    }    @Test    void updateTest() throws SQLException {        //save        Member member = new Member("memberV6", 10000);        repository.save(member);        //findById        Member findMember = repository.findById(member.getMemberId());        assertThat(findMember).isEqualTo(member);        //update: money: 10000 -> 20000        repository.update(member.getMemberId(), 20000);        Member updatedMember = repository.findById(member.getMemberId());        assertThat(updatedMember.getMoney()).isEqualTo(20000);    }    @Test    void deleteTest() throws SQLException {        //save        Member member = new Member("memberV0", 10000);        repository.save(member);        //findById        Member findMember = repository.findById(member.getMemberId());        log.info("findMember={}", findMember);        assertThat(findMember).isEqualTo(member);        //update: money: 10000 -> 20000        repository.update(member.getMemberId(), 20000);        Member updatedMember = repository.findById(member.getMemberId());        assertThat(updatedMember.getMoney()).isEqualTo(20000);        //delete        repository.delete(member.getMemberId());        assertThatThrownBy(() -> repository.findById(member.getMemberId()))            .isInstanceOf(NoSuchElementException.class);    }}